<?php

/**
 * @file
 * Test endpoints for specific OC API.
 *
 */

/**
 * Run test cases for the endpoint.
 *
 */
class OCAPIEndpointNodesTests extends ServicesWebTestCase {
  // Class variables
  protected $privilegedUser = NULL ;
  // Endpoint details.
  protected $endpoint = NULL;

  /**
   * Implementation of setUp().
   */
  public function setUp() {
    parent::setUp(
      'ctools',
      'services',
      'rest_server',
      'comment'
    );
    // Set up endpoint.
    $this->endpoint = $this->saveNewEndpoint();
    
    // Create specific path.  This should be retrieved from 
    // a specific feature
    $this->endpoint->path = 'api/v1';
  }

  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('OC API Endpoints'),
      'description' => t('Test the node endpoints for OC API.'),
      'group' => t('OC API'),
    );
  }
  
  /**
   * testing node_resource Index
   */
  public function testOCAPIEndpointNodesNodeIndexAnonymous() {
    // Create and log in our privileged user.
    $this->privilegedUser = $this->drupalCreateUser(array(
      'administer services',
      'perform unlimited index queries',
    ));
    //$this->drupalLogin($this->privilegedUser);

    // Create a set of nodes. The node resource returns 20 returns at a time,
    // so we create two pages and a half worth.
    $nodes = array();
    $count = 50;
    for ($i = 0; $i < $count; $i++) {
      $node = $this->drupalCreateNode();
      $nodes[$node->nid] = $node;
    }

    // Get the content.
    $page_count = ceil(count($nodes) / 20);
    $retrieved_nodes = array();
    for ($page = 0; $page < $page_count; $page++) {
      $responseArray = $this->servicesGet($this->endpoint->path . '/node', array('page' => $page, 'fields' => 'nid,title'));
      $this->assertTrue(count($responseArray['body']) <= 20, t('Correct number of items returned'));

      // Store the returned node IDs.
      foreach ($responseArray['body'] as $node) {
        if (isset($retrieved_nodes[$node->nid])) {
          $this->fail(t('Duplicate node @nid returned.', array('@nid' => $node->nid)));
        }
        $retrieved_nodes[$node->nid] = TRUE;

        $this->assertTrue($nodes[$node->nid]->title == $node->title, t('Successfully received Node info'), 'NodeResource: Index');
      }
    }

    // We should have got all the nodes.
    $expected_nids = array_keys($nodes);
    sort($expected_nids);
    $retrieved_nids = array_keys($retrieved_nodes);
    sort($retrieved_nids);
    $this->assertEqual($expected_nids, $retrieved_nids, t('Retrieved all nodes'));

    // The n+1 page should be empty.
    $responseArray = $this->servicesGet($this->endpoint->path . '/node', array('page' => $page_count + 1));
    $this->assertEqual(count($responseArray['body']), 0, t('The n+1 page is empty'));

    // Adjust the pager size.
    $responseArray = $this->servicesGet($this->endpoint->path . '/node', array('fields' => 'nid,title', 'pagesize' => 40));
    $this->assertTrue(count($responseArray['body']) == 40, t('Correct number of items returned'));

    // Swap to user that can only use the default pager size.
    $this->lessPrivilegedUser = $this->drupalCreateUser(array(
      'administer services',
    ));
    $this->drupalLogin($this->lessPrivilegedUser);
    $responseArray = $this->servicesGet($this->endpoint->path . '/node', array('fields' => 'nid,title', 'pagesize' => 40));
    $this->assertTrue(count($responseArray['body']) == 20, t('Correct number of items returned'));
  }
}
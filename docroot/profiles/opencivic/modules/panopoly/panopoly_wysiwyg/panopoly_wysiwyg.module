<?php
/**
 * @file
 */

include_once('panopoly_wysiwyg.features.inc');
include_once('panopoly_wysiwyg.features.wysiwyg.inc');

/**
 * Implements hook_apps_app_info()
 */
function panopoly_wysiwyg_apps_app_info() {
  return array(
    'configure form' => 'panopoly_wysiwyg_configure_form',
  );
}

/**
 * Configuration Form for Panopoly WYSIWYG
 */
function panopoly_wysiwyg_configure_form($form, &$form_state) {
  $form = array();

  $form['panopoly_wysiwyg_show_format_details'] = array(
    '#title' => t('Show Text Formatter Details'),
    '#type' => 'select',
    '#required' => TRUE,
    '#options' => array(
      '1' => 'Show',
      '0' => 'Do Not Show',
    ),
    '#default_value' => variable_get('panopoly_wysiwyg_show_format_details', 0),
    '#description' => t('Do you want Panopoly to show the help text and text format guidelines?'),
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_ctools_plugin_directory()
 */
function panopoly_wysiwyg_ctools_plugin_directory($module, $plugin) {
  return 'plugins/' . $plugin;
}

/**
  * Implementation of hook_wysiwyg_plugin().
  */
function panopoly_wysiwyg_wysiwyg_plugin($editor) {
  switch ($editor) {
    case 'tinymce':
      return array(
        'pdw' => array(
          'path' => drupal_get_path('module', 'panopoly_wysiwyg') . '/plugins/wysiwyg/pdw',
          'filename' => 'editor_plugin.js',
          'buttons' => array(
            'pdw_toggle' => t('Kitchen Sink')
          ),
          'url' => 'http://www.neele.name/pdw_toggle_toolbars/',
          'load' => TRUE,
        ),
        'spellchecker' => array(
          'internal' => TRUE,
          'buttons' => array(
            'spellchecker' => t('Spell Check')
          ),
          'url' => 'http://wiki.moxiecode.com/index.php/TinyMCE:Plugins/spellchecker',
          'load' => TRUE,
        ),
        'inlinepopups' => array(
          'internal' => TRUE,
          'url' => 'http://www.tinymce.com/wiki.php/Plugin:inlinepopups',
          'load' => TRUE,
        ),
      );
  }
}


/**
 * Implements of hook_element_info_alter().
 */
function panopoly_wysiwyg_element_info_alter(&$type) {
  // Change text format processing on elements to our version.
  if (isset($type['text_format'])) {
    $type['text_format']['#process'][] = 'panopoly_wysiwyg_filter_process_format';
  }
}

/**
 * Callback for processing the text_format element
 */
function panopoly_wysiwyg_filter_process_format($element) {

  // Do not auto submit the form due to changes of the filter
  $element['format']['format']['#attributes']['class'][] = 'ctools-auto-submit-exclude';

  // Do not show the guidelines and help text for text formatters
  // Also format this all a bit different so that it looks right
  if (!variable_get('panopoly_wysiwyg_show_format_details', FALSE)) {
    $element['format']['#weight'] = 1;
    $element['format']['#prefix'] = '<div class="clearfix"><div class="format-toggle">';
    $element['format']['#suffix'] = '</div></div>';
    unset($element['format']['#type']);
    $element['format']['format']['#title'] = 'Editor: ';
    $element['format']['help']['#access'] = FALSE;
    $element['format']['guidelines']['#access'] = FALSE;
  }

  return $element;
}

/**
 * Implementation of hook_module_implements_alter()
 */
function panopoly_wysiwyg_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'wysiwyg_editor_settings_alter') {
    $group = $implementations['panopoly_wysiwyg'];
    unset($implementations['panopoly_wysiwyg']);
    $implementations['panopoly_wysiwyg'] = $group;
  }  
}

/**
 * Implementation of hook_wysiwyg_editor_settings_alter()
 */
function panopoly_wysiwyg_wysiwyg_editor_settings_alter(&$settings, $context) {

  // Only work the magic on the Panopoly profiles
  if (strpos($context['profile']->format, 'panopoly_') === 0) {

    switch ($context['editor']['name']) {
      case 'tinymce':

        // Define the skin to use
        $settings['skin'] = 'cirkuit';

        // Define the spellchecking settings
        $settings['spellchecker_languages'] = '+English=en';

        // Process a default order for the WYSIWYG
        $enabled_buttons = preg_split('/,/', $settings['theme_advanced_buttons1']);
        $default_buttons = array('bold', 'italic', 'strikethrough', '|', 'bullist', 'numlist', 'blockquote', '|', 'justifyleft', 'justifycenter', 'justifyright', '|', 'linkit', 'unlink', 'break', '|', 'fullscreen', 'spellchecker', 'media', 'captionfilter', 'pdw_toggle', 'PAGEBREAK', 'formatselect', '|', 'underline', '|', 'justifyfull', '|', 'forecolor', '|', 'pastetext', 'pasteword', 'removeformat', '|', 'charmap', '|', 'indent', 'outdent', '|', 'undo', 'redo'); 
        foreach ($default_buttons as $button) {
          if (in_array($button, $enabled_buttons)) {
            unset($enabled_buttons[array_search($button, $enabled_buttons)]);
          }
          elseif ($button != '|' && $button != 'PAGEBREAK') {
            unset($default_buttons[array_search($button, $default_buttons)]);
          }
        }

        // Define the final button row settings
        $default_buttons_list = preg_split('/,PAGEBREAK,/', implode(',', $default_buttons));
        $settings['theme_advanced_buttons1'] = $default_buttons_list[0];
        $settings['theme_advanced_buttons2'] = $default_buttons_list[1];
        $settings['theme_advanced_buttons3'] = (count($enabled_buttons) > 0) ? implode(',', $enabled_buttons) : NULL;

        // Define PDW Plugin Settings
        $settings['pdw_toggle_on'] = '1'; 
        $settings['pdw_toggle_toolbars'] = (count($enabled_buttons) > 0) ? '2,3' : '2';

        // Enable the inlinepopups and modal settings
        $settings['plugins'] .= ',inlinepopups';
        $settings['dialog_type'] = 'modal';

        // Allow extra elements for Media module
        // See - http://drupal.org/node/1835826
        if (empty($settings['extended_valid_elements'])) {
          $settings['extended_valid_elements'] = 'img[!src|title|alt|style|width|height|class|hspace|vspace|view_mode|format|fid]';
        }
        else {
          $settings['extended_valid_elements'] = array_merge(explode(',', $settings['extended_valid_elements']), array('img[!src|title|alt|style|width|height|class|hspace|vspace|view_mode|format|fid]'));

          // When adding new elements to $settings['extended_valid_elements'], make sure
          // that we're merging, and not overwriting.
          $settings_array = array();
          foreach($settings['extended_valid_elements'] as $tag) {
            list($tag, $allowed_attributes) = explode('[', $tag);
            $allowed_attributes = explode('|', trim($allowed_attributes, ']'));
            foreach($allowed_attributes as $key => $attribute) {
              $settings_array[$tag][$attribute] = $attribute;
            }
          }
          $valid_elements = array();
          foreach ($settings_array as $tag => $allowed_attributes) {
            $attributes = in_array('*', $allowed_attributes) ? '*' : implode('|', $allowed_attributes);
            $valid_elements[] = $tag . '[' . $attributes . ']';
          }
          $settings['extended_valid_elements'] = implode(',', $valid_elements);
        }
        break;
      case 'markitup':

        // Load the appropriate CSS and JS
        drupal_add_css($context['editor']['library path'] . '/markitup/sets/html/style.css'); 
        drupal_add_js($context['editor']['library path'] . '/markitup/sets/html/set.js');

        // Defin the new header buttons
        $header_buttons = array(
          'header-begin' => array(
            'className' => 'markItUpSeparator',
          ),
          'h1' => array(
            'name' => t('Heading 1'),
            'className' => 'markitup-h1',
            'key' => '1',
            'openWith' => '<h1(!( class="[![Class]!]")!)>',
            'closeWith' => '</h1>',
            'placeHolder' => 'Your title here...',
          ),
          'h2' => array(
            'name' => t('Heading 2'),
            'className' => 'markitup-h2',
            'key' => '2',
            'openWith' => '<h2(!( class="[![Class]!]")!)>',
            'closeWith' => '</h2>',
            'placeHolder' => 'Your title here...',
          ),
          'h3' => array(
            'name' => t('Heading 3'),
            'className' => 'markitup-h3',
            'key' => '3',
            'openWith' => '<h3(!( class="[![Class]!]")!)>',
            'closeWith' => '</h3>',
            'placeHolder' => 'Your title here...',
          ),
          'h4' => array(
            'name' => t('Heading 4'),
            'className' => 'markitup-h4',
            'key' => '4',
            'openWith' => '<h4(!( class="[![Class]!]")!)>',
            'closeWith' => '</h4>',
            'placeHolder' => 'Your title here...',
          ),
          'paragraph' => array(
            'name' => t('Paragraph'),
            'className' => 'markitup-paragraph',
            'key' => 'p',
            'openWith' => '<p(!( class="[![Class]!]")!)>',
            'closeWith' => '</p>',
          ),
          'header-end' => array(
            'className' => 'markItUpSeparator',
          ),
          );

        // Define the list styles
        $list_styles = array(
          'list-bullet' => array(
            'name' => t('Unordered List'),
            'className' => 'markitup-list-bullet',
            'openWith' => "<ul>\n",
            'closeWith' => '</ul>',
          ),
          'list-numeric' => array(
            'name' => t('Ordered List'),
            'className' => 'markitup-list-numeric',
            'openWith' => "<ol>\n",
            'closeWith' => '</ol>',
          ),
        );

        // Add the header buttons to the end
        foreach ($header_buttons as $tag => $details) {
          $settings['markupSet'][$tag] = $details;
          $context['profile']->settings['buttons']['html'][$tag] = 1;
        }

        // Add the list styles to the end
        foreach ($list_styles as $tag => $details) {
          $settings['markupSet'][$tag] = $details;
          $context['profile']->settings['buttons']['html'][$tag] = 1;
        }
        break;
    }
  }
}

<?php
// $Id$
/**
 * @file
 * Tranclude nodes into other nodes
 */

/**
 * Implementation of hook_help().
 */
function transclude_help($section = 'admin/help#transclude', $args = array()) {
  $output = '';
  switch ($section) {
    case 'admin/help#transclude':
      return t('<p>Use special tags to insert the contents of an external web page into text.</p><p>You may use [transclude:<em>url</em> <em>base</em>] tags in the body of a node or anywhere that Drupal\'s filter system runs to display the contents of an external web page at <em>url</em>. The <em>base</em> specifies a base path that should be used to convert relative URLs in image tags to absolute URLs.</p>');
  }
}

/**
 * Implementation of hook_filter_info().
 */
function transclude_filter_info() {
  $filters['transclude'] = array(
    'title' => t('Transclude'),
    'description' => t('Transcludes the contents of an external web page using [transclude:url base] tags.'),
    'process callback' => '_transclude',
    'settings callback' => '_transclude_settings',
    'tips callback' => '_transclude_tips',
    'default settings' => array(
      'target' => 0,
    ),
  );
  return $filters;
}

/**
 * Callback function for hook_filter_info().
 */
function _transclude($text, $filter, $format) {
  if (preg_match_all('/\[transclude:([^ \]]+)\s+([^\]]*)?\]/i', $text, $match)) {
    $raw_tags = $repl = array();
    foreach ($match[0] as $key => $value) {
      $raw_tags[] = $match[0][$key];
      $url = $match[1][$key];
      $base = $match[2][$key];
      $replacement = '';
      if ($result = drupal_http_request($url)) {
        $replacement = _transclude_fix_image_paths($result->data, $base);
        $replacement = _transclude_fix_anchor_paths($replacement, $base, $filter->settings['target']);
      }

      $repl[] = $replacement;
    }
    return str_replace($raw_tags, $repl, $text);
  }
  return $text;
}

/**
 * Helper function to fix image paths.
 *
 * @param $text
 *   The HTML to be fixed
 * @param $base
 *   The base path to be used when converting relative to absolute URLs
 *
 * @return
 *   The corrected HTML.
 */
function _transclude_fix_image_paths($text, $base) {
  preg_match_all('|(https?://)([^/]+)((/.*)?)|i', $base, $match);
  $website = $match[1][0] . $match[2][0];
  $path = $match[3][0];

  $subpattern = '(\s+[0-9a-zA-Z]+="[^"]*")*';
  $pattern = '|(<img' . $subpattern . ')\s+src="([^"]*)"' . $subpattern . '\s*/?>|i';
  preg_match_all($pattern, $text, $match);
  foreach ($match[0] as $key => $value) {
    $localpath = $match[3][$key];
    if (strpos($localpath, '/')===0) {
      $replacement_path = $website . $localpath;
    }
    elseif (strpos(strtolower($localpath), 'http://')===0 || strpos(strtolower($localpath), 'https://')===0) {
      $replacement_path = $localpath;
    }
    else {
      $replacement_path = "$base/$localpath";
    }
    $text = str_replace($value, $match[1][$key] . ' src="' . $replacement_path . '"' . $match[4][$key] . " />", $text);
  }
  return $text;
}

/**
 * Helper function to fix anchor tags.
 *
 * @param $text
 *   The HTML to be fixed
 * @param $base
 *   The base path to be used when converting relative to absolute URLs
 *
 * @return
 *   The corrected HTML.
 */
function _transclude_fix_anchor_paths($text, $base, $target=NULL) {
  preg_match_all('|(https?://)([^/]+)((/.*)?)|i', $base, $match);
  $website = $match[1][0] . $match[2][0];
  $path = $match[3][0];
  if (!empty($target) && $target) {
    $target = ' target="' . $target . '"';
  }

  $subpattern = '(\s+[0-9a-zA-Z]+="[^"]*")*';
  $pattern = '|(<a' . $subpattern . ')\s+href="([^"]*)"' . $subpattern . '\s*>|i';
  preg_match_all($pattern, $text, $match);
  foreach ($match[0] as $key => $value) {
    $localpath = $match[3][$key];
    if (strpos($localpath, '/')===0) {
      $replacement_path = $website . $localpath;
    }
    elseif (strpos(strtolower($localpath), 'http://')===0 || strpos(strtolower($localpath), 'https://')===0) {
      $replacement_path = $localpath;
    }
    else {
      $replacement_path = "$base/$localpath";
    }
    $text = str_replace($value, $match[1][$key] . ' href="' . $replacement_path . '"' . $match[4][$key] . $target . " >", $text);
  }
  return $text;
}

/**
 * Settings callback for the transclude filter.
 */
function _transclude_settings($form, &$form_state, $filter, $format, $defaults) {
  $filter->settings += $defaults;
  $settings['target'] = array(
      '#type' => 'select',
      '#title' => t('Target'),
      '#options' => array(
        0 => t('---'),
        '_blank' => t('_blank (Open in a new window)'),
        '_self' => t('_self (Open in same window)'),
        '_parent' => t('_parent (Open in parent frame)'),
        '_top' => t('_top (Open in full window)'),
      ),
      '#default_value' => $filter->settings['target'],
      '#description' => t('Set this to specify the window in which external links should open.'),
  );
  return $settings;
}

/**
 * Tips callback for the transclude filter.
 */
function _transclude_tips($filter, $format, $long = FALSE) {
  if ($long) {
    return t('<a name="filter-transclude"></a>You may use [transclude:<em>url</em> <em>base</em>] tags to display the contents of url.');
  }
  else {
    return t('You may use <a href="@transclude_help">[transclude:<em>url</em> <em>base</em>] tags</a> to display the contents of url <em>url</em>, prepending base in img and anchor tags containing local paths.',
    array("@transclude_help" => url("filter/tips/$format->format", array('fragment' => 'filter-transclude'))));
  }
}

<?php

define('MAXLENGTH_DEFAULT_JS_LABEL', 'Content limited to @limit characters, remaining: <strong>@remaining</strong>');

/**
 * Implements hook_help().
 */
function maxlength_help($path, $arg) {
  switch ($path) {
    // Main module help for the block module
    case 'admin/help#maxlength_js':
      return '<p>' . t('Maxlength creates a new Form Property: #maxlength_js which in conjunction with #maxlength will enforce, via JavaScript, the maxlength of a textfield or textarea and will show the number of characters left.') . '</p>';
      return '<p>' . t('Using the field setting page, you can limit textfields and textareas. For textfields this module will use the "<strong>Maximum length</strong>" value set in the <strong>field settings</strong>') . '</p>';
  }
}

/**
 * Implements hook_element_info_alter().
 */
function maxlength_element_info_alter(&$cache) {
  // Add prerender functions to textareas and text fields
  $cache['textfield']['#pre_render'][] = 'maxlength_pre_render';
  $cache['textarea']['#pre_render'][] = 'maxlength_pre_render';
  $cache['textarea']['#process'][] = 'maxlength_process_element';
  $cache['text_format']['#pre_render'][] = 'maxlength_pre_render';
  $cache['text_format']['#process'][] = 'maxlength_process_element';
}

function maxlength_pre_render($element) {
  if (((isset($element['#maxlength']) && $element['#maxlength'] > 0) ||(isset($element['#attributes']['maxlength']) && $element['#attributes']['maxlength'] > 0)) &&
        isset($element['#maxlength_js']) && $element['#maxlength_js'] === TRUE) {
    if ($element['#type'] == 'textarea' && !isset($element['#attributes']['maxlength'])) {
      $element['#attributes']['maxlength'] = $element['#maxlength'];
    }
    $element['#attributes']['class'][] = 'maxlength';
    $element['#attached']['js'][] = drupal_get_path('module', 'maxlength') . '/js/maxlength.js';
  }
  return $element;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function maxlength_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  // Add settings for textarea widgets
  $fields = array('text_textarea_with_summary', 'text_textarea');
  if (in_array($form['#instance']['widget']['type'], $fields)) {
    $form['instance']['widget']['settings']['maxlength_js'] = array(
      '#type' => 'textfield',
      '#title' => 'Maxlength JS',
      '#description' => t('The maximum length of the field in characters.'),
      '#default_value' => isset($form['#instance']['widget']['settings']['maxlength_js']) ? $form['#instance']['widget']['settings']['maxlength_js'] : NULL,
    );
    $form['instance']['widget']['settings']['maxlength_js_enforce'] = array(
      '#type' => 'checkbox',
      '#title' => t('Force text truncate'),
      '#description' => t('Check this option if you want that the html (or the text) that the user inserts into the field to be truncated.'),
      '#default_value' => isset($form['#instance']['widget']['settings']['maxlength_js_enforce']) ? $form['#instance']['widget']['settings']['maxlength_js_enforce'] : NULL,
    );
    $form['instance']['widget']['settings']['maxlength_js_truncate_html'] = array(
      '#type' => 'checkbox',
      '#title' => t('Truncate html'),
      '#description' => t('Check this option if the input field may contain html text and you want to truncate it safely. This will also overwrite the maxlength validation from core, so that it will strip the tags before checking the length.'),
      '#default_value' => isset($form['#instance']['widget']['settings']['maxlength_js_truncate_html']) ? $form['#instance']['widget']['settings']['maxlength_js_truncate_html'] : NULL,
      '#states' => array(
        'enabled' => array(
          ':input[id=edit-instance-widget-settings-maxlength-js-cut-text]' => array('checked' => TRUE),
        ),
      ),
    );
  }
  // Add settings for textfield widgets
  $fields = array('text_textfield');
  if (in_array($form['#instance']['widget']['type'], $fields)) {
    $form['instance']['widget']['settings']['maxlength_js'] = array(
      '#type' => 'checkbox',
      '#title' => 'Maxlength JS',
      '#description' => t('Limit the maximum length of the field in characters using the "<strong>Maximum length</strong>" value set in the <strong>field settings</strong> using Javascript.'),
      '#default_value' => isset($form['#instance']['widget']['settings']['maxlength_js']) ? $form['#instance']['widget']['settings']['maxlength_js'] : NULL,
    );
  }

  $form['instance']['widget']['settings']['maxlength_js_label'] = array(
    '#type' => 'textarea',
    '#rows' => 2,
    '#title' => t('Count down message'),
    '#default_value' =>  isset($form['#instance']['widget']['settings']['maxlength_js_label']) ? $form['#instance']['widget']['settings']['maxlength_js_label'] : MAXLENGTH_DEFAULT_JS_LABEL,
    '#description' => t('The text used in the Javascript message under the input, where "@limit", "@remaining" and "@count" are replaced by the appropriate numbers.'),
  );
}

/**
 * Implements hook_field_attach_form().
 */
function maxlength_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  $fields = field_info_instances($entity_type, $form['#bundle']);
  // Check if any of the fields has a #maxlength_js setting
  foreach ($fields as $field_name => $value) {
    if (isset($value['widget']['settings']['maxlength_js']) && $value['widget']['settings']['maxlength_js'] > 0) {
      $elements[$field_name] = $value;
    }
  }
  if (isset($elements)) {
    _maxlength_children($form, $elements);    
  }
}

/**
 * Recursively add the #maxlength_js and #maxlength properties to the elements
 * of a form
 *
 * @todo: This function is currently only working for fieldapi fields.
 *
 * @param $element
 *   The form element to start looking for
 * @param $ms_elements
 *   An associative array of api field elements as returned by
 *   field_info_instances() that the #maxlength and #maxlength_js properties
 *   should be set, with the field_name as a key and the field_data as the value
 */
function _maxlength_children(&$element, $ms_elements) {
  $children = element_get_visible_children($element);
  foreach ($children as $child) {
    // Check if the field settings for maxlength_js are set and add the maxlength and the label text.
    if (isset($element[$child]['#field_name']) && isset($ms_elements[$element[$child]['#field_name']])) {
      $element[$child]['#maxlength'] = isset($element[$child]['#maxlength']) ? $element[$child]['#maxlength'] : $ms_elements[$element[$child]['#field_name']]['widget']['settings']['maxlength_js'];
      $element[$child]['#maxlength_js'] = TRUE;

      $maxlength_js_label = !empty($ms_elements[$element[$child]['#field_name']]['widget']['settings']['maxlength_js_label']) ?
        $ms_elements[$element[$child]['#field_name']]['widget']['settings']['maxlength_js_label'] : MAXLENGTH_DEFAULT_JS_LABEL;
      $maxlength_js_label = t($maxlength_js_label);
      $element[$child]['#attributes']['maxlength_js_label'] = array($maxlength_js_label);
    }
    if (isset($element[$child]['#field_name']) && isset($ms_elements[$element[$child]['#field_name']]['widget']['settings']['maxlength_js_enforce']) &&
        $ms_elements[$element[$child]['#field_name']]['widget']['settings']['maxlength_js_enforce']) {
      $element[$child]['#maxlength_js_enforce'] = TRUE;
    }
    if (isset($element[$child]['#field_name']) && isset($ms_elements[$element[$child]['#field_name']]['widget']['settings']['maxlength_js_truncate_html']) &&
        $ms_elements[$element[$child]['#field_name']]['widget']['settings']['maxlength_js_truncate_html']) {
      $element[$child]['#maxlength_js_truncate_html'] = TRUE;
    }
    _maxlength_children($element[$child], $ms_elements);
  }
}

/**
 * Process handler for the form elements that can have maxlength attribute.
 */
function maxlength_process_element($element, &$form_state) {
  if (isset($element['#maxlength_js_enforce']) && $element['#maxlength_js_enforce']) {
    $element['#attributes']['class'][] = 'maxlength_js_enforce';
  }
  // Move the maxlength property in the attributes of the fields to bypass the
  // core validation if we have to truncate the html text.
  // We will do our own validation in this case.
  if (isset($element['#maxlength_js_truncate_html']) && $element['#maxlength_js_truncate_html']) {
    $element['#element_validate'][] = 'maxlength_validate_input';
    $element['#attributes']['maxlength'] = $element['#maxlength'];
    $element['#attributes']['class'][] = 'maxlength_js_truncate_html';
    unset($element['#maxlength']);
  }
  return $element;
}

/**
 * Custom validation handler for the maxlength of input fields that have the
 * maxlength attribute.
 */
function maxlength_validate_input(&$element, &$form_state) {
  // Verify that the value is not longer than #maxlength characters.
  if (isset($element['#attributes']['maxlength'])) {
    // Compute the length of the text, without counting the tags, and consider
    // the "enter" characters as only one character.
    $value = filter_xss(str_replace(array("\r\n", '&nbsp;'), array(' ', ' '), $element['#value']), array());
    if (drupal_strlen($value) > $element['#attributes']['maxlength']) {
      form_error($element, t('!name cannot be longer than %max characters but is currently %length characters long.', array('!name' => empty($element['#title']) ? $element['#parents'][0] : $element['#title'], '%max' => $element['#attributes']['maxlength'], '%length' => drupal_strlen($value))));
    }
    // giving the element back the #maxlength, maybe some other modules requires it.
    $element['#maxlength'] = $element['#attributes']['maxlength'];
  }
}

/**
 * Implements hook_form_alter().
 */
function maxlength_form_alter(&$form, &$form_state, $form_id) {
  // Attach maxlength to node title
  if (strpos($form_id, '_node_form') !== FALSE && variable_get('maxlength_js_' . $form['#node']->type, FALSE)) {
    if (!module_exists('title') || title_field_replacement_enabled('node', $form['#node']->type, 'title') !== TRUE) {
      $form['title']['#maxlength_js'] = TRUE;
      $form['title']['#maxlength'] = intval(variable_get('maxlength_js_' . $form['#node']->type, ''));

      $form['title']['#attributes']['maxlength_js_label'] = array();
      $maxlength_js_label = t(variable_get('maxlength_js_label_' . $form['#node']->type, MAXLENGTH_DEFAULT_JS_LABEL));
      $form['title']['#attributes']['maxlength_js_label'][] = $maxlength_js_label;
      maxlength_pre_render($form['title']);
    }
  }
}

/**
 * Implements hook_form_node_type_alter().
 */
function maxlength_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  $type = $form['#node_type']->type;
  // If the Title Module is enabled and the Title Field is Replaced the maxlength Module
  // we don't need this functionality any more, because the title is now a field itself
  if (!module_exists('title') || title_field_replacement_enabled('node', $type, 'title') !== TRUE) {
    // Add maxlength setting to node type form
    $form['submission']['maxlength_js'] = array(
      '#type' => 'textfield',
      '#title' => 'Maxlength JS',
      '#description' => t('The maximum length of the field in characters. Can be maximum 255 characters.'),   
      '#default_value' => variable_get('maxlength_js_' . $form['#node_type']->type, ''),
      '#element_validate' => array('maxlength_node_title_validate'),
    );
    $form['submission']['maxlength_js_label'] = array(
      '#type' => 'textarea',
      '#rows' => 2,
      '#title' => t('Count down message'),
      '#default_value' =>  variable_get('maxlength_js_label_' . $form['#node_type']->type, MAXLENGTH_DEFAULT_JS_LABEL),
      '#description' => t('The text used in the Javascript message under the input, where "@limit", "@remaining" and "@count" are replaced by the appropriate numbers.'),
    ); 
  }
}

/**
 * Checks if the title field of the node is not set to more then 255 chars, because Drupal Core cannot handle this
 */
function maxlength_node_title_validate($element, &$form_state, $form) { 
   if (!empty($element['#value']) && !is_numeric($element['#value'])) {
     form_error($element, t('This field needs to be numeric'));
   } 
   if (!empty($element['#value']) && is_numeric($element['#value']) && $element['#value'] > 255) {
     form_error($element, t('Note titles can be maximum 255 characters long.'));
   }   
}